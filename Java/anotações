Revisão do conteudo 04 setembro, 2025

ontem estudei sobre java, a introdução da linguagem java, coisas basicas sobre como
oque é um algoritimo, que na minha explicação atraves do meu entendimento seria, passos a passos que voce usa para a resolução
de um problema, podendo ter passos que só acontecem se outra condição acontecer, ou passos que se repetem até determinada situa
ção for atingida

então um algoritimo recebe entradas, as entradas vão para o processamento (algoritimo), dali gera um dado de saida
esse é o tipo mais comum de algoritimo visto, porem existe algoritimos que só recebem entrada mas não tem saida apos
processamento(algoritimo), tem aqueles que só tem saida, e aqueles que são mais esquisitos ainda que nao possuem entada
nem saida de dados

#Estrutura de dados
uma estrutura de dados serve para organizar e admnistrar os dados
podendo ser um exemplo de estrutura de dados
--listas (ordenadas ou não ordenadas)
--filas (FIFO)
--pilhas (LIFO)
--arvore
--int, real char, variaveis e constates e operação

#TERMINAL
um terminal é uma forma de conversar com o So de forma direta atraves de linhas de comandos
um terminal quando aberto ele sempre vai apontar para a pasta raiz da sua maquina
como meu exemplo raoni@PcRaoni:~$
o comando LS, lista os arquivos que estão na pasta apontada pelo terminal no momento
o comando PWD(print work directory) printa o caminho de pastas para o diretorio que voce esta agora
LS -A mostra todos os arquivos escondidos
LS -L mostra a versão longa do ls normal, trazendo mais informações
podendo juntar as duas LS -AL
cd (change directory) muda o diretorio atual da maquina
clear limpa o terminal
mkdir cria uma pasta nova
RMDIR remove as pastas
rm remove arquivos

#FUNDAMENTOS
src -> source, fonte, pasta raiz do codigo java, onde vai ficar guardado os pacotes e as classes
package -> um pacote que agrupa e organiza as suas classes de função parecida em java
como por exemplo se tivessemos um projeto chamado clinica
teriamos um package de pessoas por exemplo
dentro dele teriamos a seguinte ordem package pessoas > medico.java, paciente.java, atendente.java
todas são class do nosso arquvio java, ficariam dentro dos packages organizados por funções parecidas
#TIPOS PRIMITIVOS
Inteiros:
Short
Byte
Long
Int
reais:
Float
Double

char -> 1 caracteres
boolean -> false or true
------------------------------
hoje sexta, setembro 5, 2025

Import:
12:00:
 o import traz bibliotecas de fora, como se fossem peças de um carro novo
 java ja vem com tudo padrão pra rolar e ser executado, se vocẽ precisar de coisas a mais
 voce precisa importar bibliotecas, voce só pode usar a data, importando a biblioteca util e date, pois nao vem
 como bibliotecas padrões da linguagem
 #Strings:
 13:00 uma string é uma forma mais maleavel de se manusear frases em java, tendo varios metodos
 pra utilizar nela como .lenght() que diz o tamamnho daquela string, ou um metodo endwith que verifica se a ultima palavra
 é oque voce colocar nos parenteses como criterio, o starts with funciona da mesma forma so que com o começo
 a frase termina com tal palavra, uso o end with, tem o indexof que vai te dizer em qual indice do vetor se encontra o começo da palavra que voce passar pra ele
 substring que quebra a string pegando um indice de inicio e de fim, pra te retornar partes dela

ler e imprimir dados do usuario 13:30:

usa-se o Scanner para ler dados

Scanner nome_do_scanner = new Scanner (tipo de leitura que ele fara);
no caso seria Scanner cin = new Scanner (System.in); o System.in diz que ele fara a leitura da entrada de dados atraves do teclado
lembrar sempre de fechar o scanner pra economizar recursos com nome_do_scanner.close

pra imprimir podemos ter algumas formas
System.out.println("quebra a linha");
System.out.printf("melhor pra se imprimir strings de forma formatada")
%d para inteiros, %f para reais e %s para string, o %f da pra ajustar as casas decimais que o numero tera no output pro console
como %.2f;

14:26: Primitivos vs objetos:
a string é uma classe assim como primitivovsobjeto tbm é

no momento que vc cria um valor pra uma classe, nos dizemos que esse valor criado para classe é um objeto, tendo atributos e comportamentos
comportamento do objeto string que foi criado com valor texto

voce nao tem nenhum comportamento associado a um tipo primitivo
o tipo primitivo só carrega dentro dele um valor
mas se eu precisar que um valor numerico tenha um comportamento associado
ai se usa wrappers, aquilo que envolve, versao objeto dos tipos primitivos. e pra cada tipo tem wrappers
tudo em java é baseado em classes com exceções de tipos primitivos
todoquando vc cria objetos de uma determinada classes nele vai ter comportamentos e atributos

wrapper é uma classe que dentro dela tem um tipo primitivo,q quando voce envolve um tipo primitico com wrapper
esse tipo passa a ter comportamentos de um objeto, podendo usar a notação ponto pra acessar certos comportamentos
pra cada versão do tipo primitivo tem uma versão orientada a objetos com comportametnos e atributos


conversão de tipos primitivos

byte>shorte>int>long -> convertendo assim voce não perde informações, do menor pro maior
long>int>short>byte -> assim voce tem que dar uma permissão explicita pro java

float > inteiro -> voce perde informações apos a virgula, agora ao contrario não tem problema de int > float
as conversões forçadas são explicitas e as não forçadas são implicitas, java nao analisa valor e sim o tipo


-------------------------------------
Hoje Segunda, setembro 8, 2025 10:24:

Conversão de string pra tipos numericos e vice e versa:
Double.parseDouble(vl1); converte de string para numero, tem que tomar cuidado com a perca de alguns dados
ystem.out.println(n1.toString().length()); o integer tranforma apartir de metodos para string
System.out.println(Integer.toString(n2));

operadores em java 11:50:
unarios, binarios e ternarios

a soma é um operador binario por exemplo, pois precisamos de um valor antes e depois
aritmeticos
sao todos como +,-,/,% e todos outros que retornem calculos matematicos
relacionais
logicos
atribuição
quanto o operador vem antes do operando é prefix ++a
quando vem apos do operando é postfix a++
e quando o operando estiver no meio de dois operandos se usa infix 3 + 2

na comparação de string se usa equals, e trim para tirar os espaços em branco, e equals para comparar o conteudo da string
sempre comparar qualquer objeto com equals para comparar o valor e nao ==, porque pra objetos em java o == confere se esses objetos
estao guardados no mesmo lugar da memoria

13:30desafio calculadora concluida

14:42:
jre vs jdk

jre java runtime enviroment, é uma aplicação java que voce precisa ter no seu dispositivo para usar java em sua maquina, pois ele instala uma jvm na sua maquina
essa jvm le o arquivo que foi compilado pelo javac.class(bytecode) que é enviado para ela e retorna um arquivo.exe pro seu So

ja a jdk java development kit, é um kit de desenvolvimento java, ele vem com coisas muito uteis para o desenvolvedor java

estruturas de repetições 15:38:
o laço ideal para se usar quanto se tem algo determinado pra quando acabar é o for
e pra quando for indeterminado é melhor se usar o while
ja o do while, o do executa primeiro e o while depois testa a condição pra executar denovo, mas pelo menos uma vez ee é executado

----------------------------------------------------------
Hoje terça, setembro 9, 10:52
o uso do switch vem de uma parte se passa o valor e os casos que podem ter de acordo com o valor guardado naquela variavel
lembrar de usar o break pra quebrar o codigo pra proxima linha

tbm da pra usar string pra manipular o for como
        for (String v = "#"; !v.equals("#####");v+="#"){
            System.out.println(v);
        }
aqui se cria uma string v, e equanto a string v for diferente de 5 # ele concatena mais uma # no final e imprime na tela
o break não se usa toda hora, usa-se uma vez ou outra em situações especificas, se nao ele causa má leitura no codigo
evitar principalmente o break rotulado e do continue rotulado, evitar ao maximo pois quebra o entedimento de maneira facil e dinamica do seu codigo

13:30 acabei todos os exercicios do final do modulo de estrutura de repetição
comecei o modulo java poo
até agora :
quando de cria um produto.java, por padrão ele fica dentro de um pacote pra organizar
quando se cria um arquivo .java, dentro desse arquivo se cria automaticamente uma classe com mesmo nome la dentro
public class Produto {}
quando se tem uma classe publica, o nome da classe reflete o nome do arquivo, em lock ou nao tudo igual o nome
dentro de um programa so tem um metodo main, uma classe que tera o metodo main
uma classe define um bloco de codigo
quando se tem public class Produto {bloco de codigo, que aqui dentro vem o metodo main}
uma classe define um bloco de codigo
quando a classe é publica tem a amarração do nome do arquivo com o nome da classe
Classe vs Objeto:
Anatomia de uma classe
modificadores class Nome(convenção CamelCase) variações {

    //corpo

    dentro do corpo da classe temos
    atributos(caracteristicas) e comportamentos(oque tal coisa faz)
    atributos são dados e comportamentos são metodos
    podemos ter dados com estrutura de dados de diversos tipos, como int, boolean, Date, String, Integer
    comportamentos
    no mundo real temos objetos com atributos e comportamentos que podem se relacionar entre si
    uma mae pode ter varios filhos
    um aluno pode fazer varios cursos
    como os objetos interagem e se relacionem entre si ?
    atributos e comportamentos = membros da classe

    dentro de uma unica estrutura posso agrupar atributos e comportamentos

    é uma forma de trazer o mundo real pro software
    uma classe define um tipo - > é uma estrutura de dados personalizada sua

    classe representa uma abstração - simplificação pega o cenario real com todas as complexidades e traz pro sftw de forma simplificada
    a abstração de um produto pra um sftw x pode ser diferente pra outro sftw y, dependendo do grau de complexidade do sftw e produto que voce trabalha
    a classe representa uma simplificação do mundo real

    ja que definimos que a classe é uma estrutura de dados, obviamente uma hora ela vai definir um dado
    esses dados definidos pela classe são os objetos dessa classe
    posso ter varios objetos de uma mesma classe, aonde nao muda a estrutura mas os valores associados aos atributos(caracteristicas)

    objeto são os dados criados apartir da estrutura de dados de uma classe
    entao classe é um tipo e objetos são dados

    objetos = instancia tbm, criei 10 objetos de um tipo produto, entao posso dizer que acabei de instanciar 10 objetos do tipo produto
    instanciar e instancia são sinonimos de objeto
    eu instanciei apartir da classe produto, os objetos soja, arroz e bolacha
    instancia == objeto

   a classe instancia varios objetos, podendo ter varios objetos apartir do mesmo molde
}

se eu tivesse uma classe produto, essa classe teria nome, preço e desconto, 3 atributos, e esses atributos teram tipos
String nome, float preço e int desconto, quando eu crio um objeto apartir dessa classe, os objetos teram os mesmos atributos
notebool, 4.200,15%, todos tem os mesmos dados porque vieram da mesma estrutura de dados

o construtor é um metodo especial, que é responsavel que apartir de uma classe instanciar objetos
o new por exemplo chama o construtor, o construtor é um metodo que apartir de uma classe cria objetos

membros de uma classe 14:19:
classe:
variaveis/constantes
construtor
metodos
classes
dentro de uma classe voce pode definir quantos metodos forem necessarios

nos temos atributos que podem ser de classe ou objeto, e diversas outras coisas que podem ser de classe ou objeto
oque vai diferenciar se um atributo é de classe ou objeto é a palavra static, a palavra static diz que aquela variavel vai pertencer ao objeto, constantes tbm e metodos tbm
adicionando a palavra static voce pode dizer que um objeto pertence a class

acessar os membros...

objeto.membro, se usa a notação ponto para acessar os metodos do objeto, acessando os membros que pertencem a um objeto ou uma classe
apartir do ponto vc consegue acessar seus mebros, seja variavel, metodo
System.out.prinf("")
O print é um membro do out q por sua vez é um mebro do system, notação ponto é a forma que voce tem pra acessar membro de um objeto ou membros de uma classe


metodos:
recebem entradas e saidas
recebem apenas entradas
apenas saida
e nao recebem nem saem

nomeMetodo (metodo camelCase)
tipo que o metodo vai retornar nomeMetodo(); <- nao recebe parametro {
        algoritimos, sequencia de passos;
        retorno do metodo,

      caso um metodo nao retorne nada é void
      nao recebe entrada nem saida
      void nomeMetodo (){}

tipo de retorno nome (parametros de entrada){}
um metodo que recebe dois parametros para somar

//recebe dois parametros de entrada e retorna um parametro
int somarNum (int n1, int n2){
        int resultado = n1 + n2;
       return resultado; voce precisa retornar um inteiro

       nomeMetodo (tipo nome, tipo nome) <- define a identidade do metodo
       pro java oque importa é se os parametros são diferentes, mesmo tendo o mesmo nome
       ele vai diferenciar um metodo do outro pela qntd de parametros

       é mais interessante usar return do que o void que nao retorna nada, porque quando nao tem return ela fica presa ao terminal para funcionar

       construtor voce pode ter mais de um, sendo eles metodos especiais que criam novos objetos
       apartir de uma classe

       quando se cria uma classe chamada produto, essa clase tera um construtor de mesmo nome
       tbm chamado produto nome da classe == nome do construtor
       o construtor padrão java, é o construtor que nao recebe nenhum parametro
                        /////////  <- conhecida como construtor padrão pois nao recebe parametros
       Produto p1 = new Produto ();
       Produto p1 = new Produto (2);

       quando voce define um outro construtor de forma explicita, o construtor padrão n vai existir mais

       class Produto {

       Produto (int a){

       definido construtor de forma explicita, oque distingue um metodo de um construtor é a ausencia de um retorno


       }


       }
       }
}
}
}
}
parei em construtores 16:40 fim do dia

quarta, setembro 10, 10:40

o construtor instancia um objeto, ele inicializa o objeto, entao voce diz o tipo do objeto criado
Produto nome do objeto = new Produto(); <- entao a ordem cria um objeto do tipo produto, aonde o new vai alocar o espaço na memoria para o construtor instanciar o novo objeto

